#!/usr/bin/perl

use common::sense;
use FindBin;
use lib $FindBin::Bin."/lib";
use Google::API::Drive;
use Fuse;
use POSIX qw/ENOENT EISDIR EINVAL EOPNOTSUPP EIO O_WRONLY/;
use Date::Parse qw/str2time/;
use Getopt::Abridged;


my $options = Getopt::Abridged->new(
	'd|debug=0',
	'm|mountpoint=s',
	-positional => ['mountpoint'],
)->process(\@ARGV) or exit;

die "No mountpoint specified" if !$options->{'mountpoint'};
die "Mountpoint '".$options->{'mountpoint'}."' does not exist" if !-d $options->{'mountpoint'};

fork and exit unless $options->{'debug'};

my $drive = Google::API::Drive->new(
	debug => $options->{'debug'},
	config_dir => undef, # Defaults to ~/.gdfs
);


Fuse::main(
	mountpoint => $options->{'mountpoint'},
	mountopts => 'fsname=gdfs:'.$drive->user_email(),
	debug => $options->{'debug'},

	getdir => \&getdir,
	getattr => \&getattr,
	statfs => \&statfs,
	read => \&file_read,
	create => \&file_create,
	open => sub { return 0 },
	truncate => sub { return 0 },
	setxattr => sub{ return -EOPNOTSUPP(); },
	write => \&file_write,
	release => \&release,
	unlink => \&unlink,
);

sub statfs
{
	my ($total, $used, $free) = $drive->quota('b');
	return (4096, 0,0, $total/4096, $free/4096, 4096);
};

sub getdir
{
	my $path = shift;
	my $id = $drive->path_to_id($path) || return -ENOENT();

	my @names = ();
	foreach ($drive->get_child_ids($id))
	{
		my $file = $drive->get_metadata_for_id($_);
		push @names, $file->{'title'};
	};

	unshift @names, '.', '..';
	push @names, 0; # Indicate the end of the list to fuse
	return @names,
};

sub getattr
{
	my $filename = shift;
	my $id = $drive->path_to_id($filename) || return -ENOENT();
	my $context = Fuse::fuse_get_context();

	my $file = $drive->get_metadata_for_id($id);
	$file->{'fileSize'} = 4096 if $file->{'mimeType'} eq 'application/vnd.google-apps.folder'; # For a dir

	my $permissions = 0100600; # For a file
	$permissions =     040700 if $file->{'mimeType'} eq 'application/vnd.google-apps.folder'; # For a dir

	my $last_access = str2time($file->{'lastViewedByMeDate'} // $file->{'modifiedDate'});
	my $last_modified = str2time($file->{'modifiedDate'});

	return (
		0,							# Device number of filesystem
		0,							# Inode number
		$permissions,				# File mode (type and permission)
		1,							# Number of hard links
		$context->{'uid'},			# Numeric UID
		$context->{'gid'},			# Numeric GID
		0,							# Device identifier (special files only)
		$file->{'fileSize'} // 0,	# File size in bytes
		$last_access,				# Last access time
		$last_modified,				# Last modification time
		$last_modified,				# Last inode change time (not create time)
		4096,						# Preferred block size for filesystem IO
		1,							# Actual number of blocks allocated
	);
};

sub file_read
{
	my $filename = shift;
	my $requested_size = shift;
	my $offset = shift;

	my $id = $drive->path_to_id($filename) || return -ENOENT();
	# NB: We return subtract one from the requested size here, but I don't know why.
	#     Without it, binary files return one byte more than Fuse wants. With it, the
	#     size matches the one Fuse expects, and the files seem to match the original
	#     contents (for both text and binary files).
	#TODO: Find out why this is!
	$requested_size -= 1 if $requested_size;
	return $drive->get_file_contents($id, $requested_size // undef, $offset // undef);
};

sub file_create
{
	my $filename = shift;
	# Also supplies create mask, open mode flags

	return file_write($filename,'',0);
};

sub file_write
{
	# Returns number of bytes sucessfully written

	my $filename = shift;
	my $new_contents = shift;
	my $offset = shift;

	my $id = $drive->path_to_id($filename);
	my $contents;
	if ($id)
	{
		# Since partial upload doesn't seem to be supported, we have to
		# patch the file locally and re-upload the whole thing.
		my $metadata = $drive->get_metadata_for_id($id);

		$contents = ($drive->cache->is_cached($id)) ? $drive->cache->get_cached($id) : file_read($filename,$metadata->{'fileSize'});

		if (length($new_contents)+$offset < length($contents))
		{
			# New content replaces a subset of old content
			substr($contents, $offset, length($new_contents)) = $new_contents;
		}
		else
		{
			# New content extends old content (and possibly replaces some too);
			$contents = substr($contents, 0, $offset);
			$contents .= $new_contents;
		};
	}
	else
	{
		# File doesn't exist, so just put the new contents into it
		$contents = $new_contents;
	};

	# Temporarily store the contents in the cache, creating a new file to get an ID if it
	# doesn't already exist.
	#
	# (NB: Writing works in chunks of 4k, so the first chunk of a new file will be uploaded,
	#      the second will download the first again, the rest will be cached. Not ideal, but
	#      much better than writing each chunk as we receive it due to the latency of setting
	#      up an SSL connection to Google every time)

	$id = $drive->put_file_contents($filename,"") if !$id; # Upload a zero length file to get a new file ID
	$drive->cache->set_cached($id, $contents) if $id; # $id might be undefined if the file couldn't be created

	return length($new_contents) if $id;
	return 0; # if we didn't write the contents succesfully
};

sub release
{
	# Upload the file when it's closed, rather than when written to, to work around the 4k write limits in perl-fuse
	# (See http://www.linuxquestions.org/questions/programming-9/fuse-programming-in-perl%3B-buffersize-issues-797566/
	#  and http://perlmonks.org/?node_id=830830 )
	my $filename = shift;

	my $id = $drive->path_to_id($filename);
	if ($drive->cache->is_cached($id))
	{
		my $success = $drive->put_file_contents($filename, $drive->cache->get_cached($id));
		$drive->cache->del_cached($id) if $success;
		$drive->cache->keep_cached($id) if !$success;

		return $success ? 0 : -EIO();
	};

	return 0; # File wasn't cached, so we don't need to do anything
};

sub unlink
{
	# Actually moves to trash for now rather than deleting
	my $path = shift;
	my $success = $drive->delete_file($path);

	return 0 if $success;
	return -EIO;
};
